package org.jage.gpu.binding.jocl.kernelAsFunction;

import java.io.File;
import java.io.IOException;
import java.util.Set;

import org.apache.commons.io.FileUtils;
import org.jage.gpu.binding.ArgumentType;
import org.jage.gpu.binding.GPU;
import org.jage.gpu.binding.Kernel;
import org.jage.gpu.binding.KernelArgument;
import org.jage.gpu.binding.jocl.JoclGpu;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This implementation of GPU accepts functions sources witch operated on one data row.
 * It wraps function to multirow kernel.
 * <p>
 * WARNING: Passing arrays is not supported!
 * </p>
 */
public class KernelAsFunctionJoclGpu implements GPU {
    private static final Logger LOGGER = LoggerFactory.getLogger(KernelAsFunctionJoclGpu.class);
    protected final JoclGpu joclGpu = new JoclGpu(true);
    private static final String KERNEL_TEMPLATE = "__kernel void %s(\n"
            + "%s\n"
            + "    )\n"
            + "{\n"
            + "\n"
            + "    int globalIndex = get_global_id(0);\n"
            + "    if (globalIndex < height){\n"
            + "        %s(%s);\n"
            + "    }\n"
            + "}";

    public KernelAsFunctionJoclGpu() throws IOException {
    }

    @Override
    public Kernel buildKernel(File sourceFile, String functionName, Set<String> inArguments, Set<String> outArguments)
            throws IOException {
        // Create the program from the source code

        String programSource = FileUtils.readFileToString(sourceFile);
        return buildKernel(programSource, functionName, inArguments, outArguments);
    }

    @Override
    public Kernel buildKernel(String kernelFileContent, String functionName, Set<String> inArguments, Set<String> outArguments) throws IOException {
        Kernel baseFunction = joclGpu.buildKernel(kernelFileContent, functionName, inArguments, outArguments);

        String wrapper = generateWrapper(functionName, baseFunction);
        String fullKernelSource = kernelFileContent + "\n\n\n "
                + "//#### FOLLOWING KERNEL WAS GENERATED BY JAGE-GPU #####"
                + "\n\n"
                + wrapper;

        LOGGER.info("Generated kernel for {} is:\n {}", functionName, fullKernelSource);
        return joclGpu.buildKernel(fullKernelSource, generatedKernelName(functionName), inArguments, outArguments);
    }

    private String generatedKernelName(String functionName) {
        return "generated_kernel_for_" + functionName;
    }

    private String generateWrapper(String functionName, Kernel baseFunction) {

        String kernelArgumentsText = "unsigned int height";
        String functionCallArguments = "";

        for (KernelArgument functionArgument : baseFunction.getArguments()) {
            kernelArgumentsText += ",\n";
            kernelArgumentsText += "__global ";
            kernelArgumentsText += toArray(functionArgument.getType());
            kernelArgumentsText += functionArgument.getArgumentName();

            if (functionCallArguments.length() > 0) {
                functionCallArguments += ",";
            }
            if (functionArgument.isOut()) {
                functionCallArguments += "&";
            }
            functionCallArguments += functionArgument.getArgumentName();
            functionCallArguments += "[globalIndex]";
        }
        return String.format(KERNEL_TEMPLATE, generatedKernelName(functionName), kernelArgumentsText, functionName, functionCallArguments);
    }

    private ArgumentType toArray(ArgumentType argumentType) {
        if (argumentType.isArray()) {
            return argumentType;
        } else {
            return ArgumentType.fromName(argumentType.toString().concat("*"));
        }
    }

}
